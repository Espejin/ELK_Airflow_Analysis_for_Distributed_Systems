input {
  # Entrada de archivos de Nginx (access.log)
  file {
    path => "C:/Users/bryan/OneDrive/Documentos/Master USFQ/7. Ingenieria de datos/Semana 4/Taller Final/Container Proyecto/nginx_logs/access.log"
    start_position => "beginning"
    add_field => { "log_type" => "access" }  # Agregar un campo para identificar este archivo
  }

  # Entrada de archivos de Nginx (error.log)
  file {
    path => "C:/Users/bryan/OneDrive/Documentos/Master USFQ/7. Ingenieria de datos/Semana 4/Taller Final/Container Proyecto/nginx_logs/error.log"
    start_position => "beginning"
    add_field => { "log_type" => "error" }  # Agregar un campo para identificar este archivo
  }

  jdbc {
    # MySQL JDBC Connection String
    jdbc_connection_string => "jdbc:mysql://127.0.0.1:3307/mydatabase?useSSL=false"
    # MySQL User
    jdbc_user => "root"
    # MySQL Password
    jdbc_password => "miclave"
    # Path to MySQL JDBC Driver
    jdbc_driver_library => "./mysql-connector-j-8.4.0.jar"
    # JDBC Driver Class
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    # SQL Query to fetch data for the first index (e.g., users)
    statement => "select * from nginx_balance_overloads"
    # Polling frequency (optional, adjust as needed)
    schedule => "*/2 * * * *" # Cada 2 mins
    add_field => { "log_type" => "overload_det" } 
  }



}

filter {
  mutate {
    add_field => { "server_or" => "" }
  }

  if  [log_type] == "access" {
  if ":80" in [message] {
    mutate {
      replace => { "server_or" => "80" }
    }
  } else if ":81" in [message] {
    mutate {
      replace => { "server_or" => "81" }
    }
  }


 csv {
      source => "message"
      separator => ","
      columns => ["remote_addr", "remote_usr", "local_timestamp", "request", "status", "body_bytes_sent", "http_refer", "http_usr_agent", "http_x_forwarded_for"]
  }

 }




}

output {
  # Enviar los logs a Elasticsearch solo si es el archivo access.log
  if [log_type] == "access" {
    if [server_or] =~ /80/ {
      elasticsearch {
        index => "nginx_log_site_1"
      }
    } else if [server_or] =~ /81/ {
      elasticsearch {
        index => "nginx_log_site_2"
      }
    }

    # Enviar a MySQL solo si es el archivo access.log
    jdbc {
      driver_class => "com.mysql.cj.jdbc.Driver"
      connection_string => "jdbc:mysql://127.0.0.1:3307/mydatabase?useSSL=false"
      username => "root"
      password => "miclave"
      driver_jar_path => "./mysql-connector-j-8.4.0.jar"
      statement => [
        "INSERT INTO nginx_logs (remote_port, remote_addr, remote_usr, loc_timestamp, request, status_req, body_bytes_sent, http_refer, http_usr_agent, http_x_forwarded_for, log_timestamp) VALUES (?, ?,?, ?,?, ?,?, ?,?, ?, NOW())",
        "server_or", "remote_addr", "remote_usr", "local_timestamp","request","status","body_bytes_sent","http_refer","http_usr_agent","http_x_forwarded_for"
      ]
    }
  }

  # Enviar los logs de error.log a un Ã­ndice diferente en Elasticsearch
  if [log_type] == "error" {
    elasticsearch {
      index => "nginx_errors"
    }

    # Enviar a MySQL solo si es el archivo error.log (si fuera necesario)
    jdbc {
      driver_class => "com.mysql.cj.jdbc.Driver"
      connection_string => "jdbc:mysql://127.0.0.1:3307/mydatabase?useSSL=false"
      username => "root"
      password => "miclave"
      driver_jar_path => "./mysql-connector-j-8.4.0.jar"
      statement => [
        "INSERT INTO nginx_errors (message, error_timestamp) VALUES (?, NOW())",
        "message"
      ]
    }
  }


  if [log_type] == "overload_det" {
    elasticsearch {
      index => "nginx_overload_details"
    }
  } 


}